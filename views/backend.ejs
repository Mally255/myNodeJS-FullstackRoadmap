<%include ./partials/header%>
<%include ./partials/navbar%>

<div>
    <h1 class="align_center">BACK-END DEVELOPMENT</h1>
</div>
<span>
    <h2 class="align_center">The Basics</h2>
</span>
<div class="timeline">
    <div class="container left">
        <div class="content">
            <h2 class="node">NODEJS</h2>
            <p>An asynchronous event driven JavaScript runtime, Node is designed to build scalable network applications.</p>
            <p><strong>Getting it done:</strong></p>
            <ul>
                <li>Learn the basics of NodeJs.</li>
                <li>Understand modules and modular segmentation.</li>
                <li>Practice, practice, and more practice.</li>
            </ul>
            <a href="https://www.youtube.com/watch?v=TlB_eWDSMt4&t">NodeJs For Beginners</a>
            <a href="https://www.youtube.com/watch?v=9Amxzvq5LY8">NodeJs: Modules</a>
        </div>
    </div>
    <div class="container right">
        <div class="content">
            <h2>PACKAGE MANAGERS: NPM / YARN</h2>
            <p><strong>NPM</strong> - Package manager for JavaScript and the world’s largest software registry.</p>
            <p><strong>Yarn</strong> - Package manager for your code. It allows you to use and share code with other developers from around the world</p>
            <p><strong>Getting it done:</strong></p>
            <ul>
                <li>Look into NPM.</li>
                <li>Look into Yarn.</li>
                <li>Choose one that works for you and practice. </li>
            </ul>
            <a href="https://www.youtube.com/watch?v=jHDhaSSKmB0">NPM</a>
            <a href="https://www.youtube.com/watch?v=g9_6KmiBISk">Yarn</a>
        </div>
    </div>
    <div class="container left">
        <div class="content">
            <h2>FRAMEWORK: EXPRESS</h2>
            <p>A minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications..</p>
            <p><strong>Getting it done:</strong></p>
            <ul>
                <li>Learn the basics of Express.</li>
                <li>Learn routing, middleware, serving static files &amp template engines.</li>
                <li>Learn &amp understand RESTful routing.</li>
            </ul>
            <a href="https://www.youtube.com/watch?v=pKd0Rpw7O48">ExpressJs</a>
        </div>
    </div>
</div>
<span>
    <h2 class="align_center">Dive Deeper</h2>
</span>
<div class="timeline">
    <div class="container right">
        <div class="content">
            <h2>DATABASES: RELATIONAL DBs</h2>
            <p>An organized collection of data, generally stored and accessed electronically from a computer system.</p>
            <p><strong>PostgreSQL</strong> - A powerful, open source object-relational database system that uses and extends the SQL language combined with many features that safely store and scale the most complicated data workloads. </p>
            <p><strong>Getting it done:</strong></p>
            <ul>
                <li>Learn &amp understand databases, DBMS, and database models.</li>
                <li>Learn basics of SQL &amp Postgres.</li>
                <li>PG module or Sequelize... pick your poison and run with it. </li>
            </ul>
            <a href="https://www.youtube.com/watch?v=wR0jg0eQsZA">Intro to Databases</a>
            <a href="https://www.youtube.com/playlist?list=PLillGF-RfqbaEmlPcX5e_ejaK7Y5MydkW">NodeJs w/ PostgreSQL</a>
            <a href="https://www.youtube.com/playlist?list=PL5ze0DjYv5DYBDfl0vF_VRxEu8JdTIHlR">NodeJs w/ Sequelize</a>
        </div>
    </div>
    <div class="container left">
        <div class="content">
            <h2>AUTHENTIFICATION</h2>
            <p> Authentication is for identifying users and provide different access rights and content depending on their id. In most cases the application provides a login form with certain credentials to verify a user.</p>
            <p><strong>Getting it done:</strong></p>
            <ul>
                <li>Learn about sessions &amp cookies.</li>
                <li>Learn about encryption &amp validation.</li>
                <li>Practice, practice, and more practice.</li>
            </ul>
            <a href="https://www.youtube.com/watch?v=hE5zeEiVqpw">Validation and Sessions</a>
            <a href="https://www.youtube.com/watch?v=7nafaH9SddU">API Authentification JWT</a>
            <a href="https://www.youtube.com/watch?v=6FOq4cUdH8k">Passport Authentification</a>
        </div>
    </div>
    <div class="container right">
        <div class="content">
            <h2>BACKEND TESTING</h2>
            <p>Testing that checks the Application and Database layer. Backend testing is defined as a type of testing that checks the server side or Database. It is also known as Database Testing.</p>
            <p><strong>Getting it done:</strong></p>
            <ul>
                <li>Learn how to write Unit tests.</li>
                <li>Learn how to write Integration tests.</li>
                <li>Practice, practice, and more practice.</li>
            </ul>
            <a href="https://www.youtube.com/watch?v=MLTRHc5dk6s">Mocha</a>
        </div>
    </div>
</div>
<span>
    <h2 class="align_center">Dive Even Deeper</h2>
</span>
<div class="timeline">
    <div class="container left">
        <div class="content">
            <h2>CACHING &amp MESSAGE BROKERS</h2>
            <p><strong>Caching</strong> - The act of keeping data in storage to allow retrieval without having to request the data from the original source, if that data will not change frequently. This is a commonly used technique to improve the performance of any application, be it desktop, mobile or web.</p>
            <p><strong>Message Broker</strong> - An intermediary computer program module that translate a message from the formal messaging protocol of the sender to the formal messaging protocol of the receiver.</p>
            <p><strong>Getting it done:</strong></p>
            <ul>
                <li>Understand the basics of caching and it's importance.</li>
                <li>Learn about caching Redis(can be used to implement both caching and message queuing).</li>
                <li>Look into other Message Brokers such as RabbitMQ, Kafka, ActiveMQ, etc.</li>
            </ul>
            <a href="https://www.youtube.com/watch?v=9S-mphgE5fA">NodeJs &amp Redis app</a>
            <a href="https://www.youtube.com/watch?v=deG25y_r6OY">RabbitMQ in 5 minutes</a>
        </div>
    </div>
    <div class="container right">
        <div class="content">
            <h2>SEARCH ENGINES</h2>
            <p>An information retrieval system designed to help find information stored on a computer system. As your application grows, simple queries on your database aren’t going to cut it and you will have to resort to a search engine.</p>
            <p><strong>Getting it done:</strong></p>
            <ul>
                <li>Learn about search engine functionality and importance.</li>
                <li>Learn about the various options: ElasticSearch, Sphinx, Solar.</li>
                <li>Start with ElasticSearch and practice.</li>
            </ul>
            <a href="https://www.youtube.com/watch?v=DR-zJXxtefE">Intro to Elastic Search</a>
            <a href="https://www.youtube.com/watch?v=vk9oW1qNRb4">Elastic Search w/ NodeJs</a>
        </div>
    </div>
    <div class="container left">
        <div class="content">
            <h2>DOCKER</h2>
            <p>A tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package..</p>
            <p><strong>Getting it done:</strong></p>
            <ul>
                <li>Understand Docker containers, virtualization, networking.</li>
                <li>Learn about Docker Machine &amp Compose.</li>
                <li>Learn the Docker CLI and proper orchestration.</li>
            </ul>
            <a href="https://www.youtube.com/watch?v=JprTjTViaEA">From 0 - DockerHero</a>
            <a href="https://www.youtube.com/watch?v=B7HNhe-dcFk">NodeJs w/ Docker</a>
        </div>
    </div>
    <div class="container right">
        <div class="content">
            <h2>WEB SERVERS &amp APPLICATION SERVERS</h2>
            <p><strong>Web Server</strong> - Accepts and fulfills requests from clients for static content from a website (HTML pages, files, images, video, and so on). The client is almost always a browser or mobile application and the request takes the form of a Hypertext Transfer Protocol (HTTP) message, as does the web server’s response.</p>
            <p><strong>Application Server</strong> - Provides its clients with access to what is commonly called business logic, which generates dynamic content; that is, it’s code that transforms data to provide the specialized functionality offered by a business, service, or application. An application server’s clients are often applications themselves, and can include web servers and other application servers. Communication between the application server and its clients might take the form of HTTP messages, but that is not required as it is for communication between web servers and their clients.</p>
            <p><strong>Getting it done:</strong></p>
            <ul>
                <li>Learn about reverse proxies &amp load balancing.</li>
                <li>Get deeper understanding for Express.</li>
                <li>Look into the NGINX web server.</li>
            </ul>
            <a href="https://www.youtube.com/watch?v=7LMaAVwZE2c">Load Balancers</a>
            <a href="https://www.youtube.com/watch?v=ozhe__GdWC8">Proxies &amp Reverse Proxies</a>
            <a href="https://www.youtube.com/playlist?list=PLQlWzK5tU-gDyxC1JTpyC2avvJlt3hrIh">Deploying NodeJs with NGINX</a>
        </div>
    </div>
    <div class="container left">
        <div class="content">
            <h2>WEB SOCKETS</h2>
            <p> Makes it possible to open a two-way interactive communication session between the user's browser and a server. With this API, you can send messages to a server and receive event-driven responses without having to poll the server for a reply.</p>
            <p><strong>Getting it done:</strong></p>
            <ul>
                <li>Learn how Web Sockets differ from HTTP.</li>
                <li>Learn how to use secure Web Sockets.</li>
                <li>Start with Socket.io than work your way forward from there.</li>
            </ul>
            <a href="https://www.youtube.com/watch?v=FmaBZcQzL-Y">Web Sockets for Beginners</a>
            <a href="https://www.youtube.com/watch?v=tHbCkikFfDE">NodeJs w/ Socket.io </a>
        </div>
    </div>
    <div class="container right">
        <div class="content">
            <h2>OTHER DATABASES</h2>
            <p>There are other databases out there such as NoSQL, GraphQL, Graph databases. Once you're comfortable with Relational Databases, move on to the others and work with them.</p>
            <p><strong>Getting it done:</strong></p>
            <ul>
                <li>Look into NoSQL.</li>
                <li>Look into GraphQL.</li>
                <li>Keep discovering.</li>
            </ul>
            <a href="https://www.youtube.com/watch?v=uD3p_rZPBUQ">NoSQL Guide</a>
            <a href="https://www.youtube.com/watch?v=ed8SzALpx1Q">GraphQL Guide</a>

        </div>
    </div>
</div>
<span>
    <h2 class="align_center">KEEP EXPLORING</h2>
</span>

<%include ./partials/footer%>
